{"version":3,"sources":["NavBar.js","InfoImport.js","Map.js","DataHandler.js","theTable.js","FeeTable.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","getIndex","state","itemIdex","clickHandler","index","setState","setShowIndex","ListItem","button","onClick","ListItemIcon","ListItemText","primary","disabled","this","dataLoaded","React","Component","InfoStyles","marginTop","InfoImport","data","txtArr","document","getElementById","click","obj","txtFile","files","reader","FileReader","readAsText","onload","event","target","result","split","cutLine","setDataLoaded","forceUpdate","lineInfo","map","line","key","value","Button","variant","color","txtSubmit","startIcon","Typography","style","allLine","length","id","type","hidden","onChange","fileSelectHandler","accept","console","log","renderStationList","Alert","elevation","Map","useState","open","setOpen","loaded","setLoaded","hintClose","reason","useEffect","BMapSub","window","BMAPSUB_ANCHOR_BOTTOM_RIGHT","zoomBtn","list","SubwayCitiesList","subwaycity","i","name","subway","Subway","citycode","zoomControl","ZoomControl","anchor","offset","Size","addControl","setZoom","addEventListener","getLines","createSubway","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","height","Station","onLine","Set","Edge","from","to","distance","preNode","postNode","adjList","hasOwnProperty","push","createRow","start","end","fee","getFee","DataHandler","StationController","spliter","real_spliter","undefined","arguments","linesCounts","tempLine","lineStationCnts","parseInt","lineName","j","stationName","replace","nextStationName","add","createDoubleEdge","parseFloat","columns","label","minWidth","align","useStyles","makeStyles","root","width","container","maxHeight","StickyHeadTable","rows","tableRows","classes","page","setPage","rowsPerPage","setRowsPerPage","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","TableBody","slice","row","hover","role","tabIndex","code","format","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","FeeTable","shortestPath","output","checked","Container","spacing","algorithmInfo","arrived","prev","dijList","Object","keys","station","Infinity","edge","toStation","min","selectNode","findTheShortest","indexOf","toFixed","resPath","currentNode","reverse","Dijkstra","path","Grid","alignItems","item","TextField","e","IconButton","contentSelector","Content","showIndex","Copyright","Link","href","Date","getFullYear","theme","display","toolbar","paddingRight","toolbarIcon","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","App","CssBaseline","AppBar","clsx","Toolbar","noWrap","Drawer","Divider","List","maxWidth","Box","pt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35785727.chunk.js","sourcesContent":["\n/*\n    @18105226 陈宇卿\n    主页导航栏渲染\n    根据不同的状态来确定渲染的内容\n*/\n\nimport React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\n\n\nclass NavBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // itemIdex 代表不同标签页\n        this.state = {\n            itemIdex : 0\n        };\n    }\n\n    getIndex = () => {\n        return this.state.itemIdex;\n    }\n\n    /* 处理点击，改变状态以显示不同内容 */\n    clickHandler = (index) => {\n        this.setState({itemIdex : index});\n        // 改变父组件的index值\n        this.props.setShowIndex(index);\n    }\n\n    render() {\n        return (\n            <div>\n                <ListItem \n                    button\n                    onClick = {() => this.clickHandler(0)}\n                >\n                <ListItemIcon>\n                    <LayersIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"地铁信息导入\" />\n                </ListItem>\n                <ListItem \n                    button\n                    onClick = {() => this.clickHandler(1)}\n                    disabled = {!this.props.dataLoaded}\n                >\n                <ListItemIcon>\n                    <BarChartIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"地铁费用表\" />\n                </ListItem>\n                <ListItem \n                    button\n                    onClick = {() => this.clickHandler(2)}\n                    disabled = {!this.props.dataLoaded}\n                >\n                <ListItemIcon>\n                    <PeopleIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"交互查询界面\" />\n                </ListItem>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n\n\n\n\n","/*\n    @18105226 陈宇卿\n    导入数据页面\n*/\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { ListItem } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nconst InfoStyles = {\n    marginTop : 50,\n}\n\n\n/* 导入数据的按钮 */\nclass InfoImport extends React.Component {\n\n    /*\n        @param\n        {StationController} data 存储所有站的信息\n        {Array} txtArr 按照\\n分割为数组的txtStr         \n    */\n    constructor(props) {\n        super(props);\n        this.state = {\n            data : props.data,\n            txtArr : []\n        };\n    }\n\n    // 触发表单提交\n    txtSubmit() {\n        document.getElementById(\"selectTXT\").click();\n    }\n\n\n    /* \n        @function fileSelectHandler\n        因为在内部函数会丢失this\n        将组件的this传进去，obj为该组件的this\n        @param \n        {object} obj this指针\n    */\n    fileSelectHandler(obj) {\n        const txtFile = document.getElementById(\"selectTXT\").files[0];\n        const reader = new FileReader();\n        reader.readAsText(txtFile);\n        /* \n            readAsText 触发load事件\n            onload 对时间event进行处理\n        */\n        reader.onload = (event) => {\n            obj.setState({\n                txtArr : event.target.result.split(\"\\n\"),\n            },\n                () => {\n                    obj.state.data.cutLine(event.target.result.split(\"\\n\"));\n                }\n            );\n            this.props.setDataLoaded(true);\n            obj.forceUpdate();  /* 强制重新渲染 */\n        };\n    }\n\n    renderStationList(lineInfo) {\n        if (!lineInfo) return \"没有查询到地铁信息\";\n        else {\n            let showListItems = undefined;\n            showListItems = lineInfo.map(line => {\n                return (<ListItem key={line[0]} value={line[1]}>{line[0]} 一共有 {line[1]} 站\n                </ListItem>);\n            });\n            return showListItems;\n        }\n    }\n\n    render() {\n        return (\n            \n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.txtSubmit} startIcon={<CloudUploadIcon />}>\n                    导入地铁数据\n                </Button>\n\n                <Typography style={InfoStyles}>\n                    {'线路数量 : ' + this.state.data.allLine.length}\n                </Typography>\n\n                 {/* input是实际提交的表单，Button只是用于触发 */}\n                 <input id=\"selectTXT\" type=\"file\" hidden onChange={() => this.fileSelectHandler(this)} accept=\".txt\" />\n\n                <ul>\n                    {console.log(this.state.data)}\n                    {this.renderStationList(this.state.data.lineInfo)}\n                </ul>\n        \n            </div>\n        );\n    }\n\n}\n\nexport default InfoImport;\n\n","/*\n    @18105226 陈宇卿\n    地图展示类\n */\n\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function Map() {\n    const [open, setOpen] = React.useState(false);\n    const [loaded, setLoaded] = React.useState(false);\n\n    const hintClose = (event, reason) => {\n        setOpen(false);\n        setLoaded(true);\n    }\n\n    const loadHint = () => {\n        if (!loaded) {\n            return (\n                <div>\n                    <Snackbar open={open} autoHideDuration={6000} onClose={hintClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                        <Alert onClose={hintClose} severity=\"warning\">\n                            暂时不支持16号线、八通线、房山线、昌平线、亦庄线、机场线。\n                        </Alert>\n                    </Snackbar>\n                </div>\n\n            );\n        }\n        else return null;\n    }\n\n    const createSubway = () => {\n        // 全局变量转为本地变量\n        let BMapSub = window.BMapSub;\n        let BMAPSUB_ANCHOR_BOTTOM_RIGHT = window.zoomBtn;\n\n        var subwayCityName = '北京';\n        var list = BMapSub.SubwayCitiesList;\n        var subwaycity = null;\n        for (var i = 0; i < list.length; i++) {\n            if (list[i].name === subwayCityName) {\n                subwaycity = list[i];\n                break;\n            }\n        }\n        var subway = new BMapSub.Subway('map', subwaycity.citycode);\n        // zoom controller\n        var zoomControl = new BMapSub.ZoomControl({\n            anchor: BMAPSUB_ANCHOR_BOTTOM_RIGHT,\n            offset: new BMapSub.Size(10, 100)\n        });\n        subway.addControl(zoomControl);\n        subway.setZoom(1);\n\n        // 提示线路信息\n        subway.addEventListener('subwayloaded', function () {\n            setOpen(true);\n            subway.getLines();\n        });\n    }\n\n    // useEffect is componentDidMount in function \n    React.useEffect(() => {\n        if (!loaded)\n            createSubway();\n    });\n\n    return (\n        <div>\n            {loadHint()}\n            <div id=\"map\" style={{ height: \"80vh\" }}>\n            </div>\n        </div>\n    );\n}\n","/*\n    @18105226 陈宇卿\n    数据存储和处理类\n*/\n\n/*\n    存站点信息的类\n*/\nclass Station {\n    /*\n        @constructor\n        站点信息\n        @param\n        {string} name 站点名称\n        {Array{string}} onLine 在几号线上\n    */\n    constructor(name) {\n        this.name = name;\n        this.onLine = new Set();\n    }\n}\n\n/*\n    存边信息的类\n*/\nclass Edge {\n    /*\n        @constructor\n        构造边\n        @param\n        {string} from 前驱节点\n        {string} to 后驱节点\n        {number} distance 两个节点相隔距离\n    */\n    constructor(from, to, distance) {\n        this.from = from;\n        this.to = to;\n        this.distance = distance;\n    }\n\n    /*\n        @static function createDoubleEdge\n        真实调用的创建双向边的辅助方法\n        @param\n        {DataHandler} obj 用于直接修改对象的邻接表\n        {string} preNode 前驱节点\n        {string} postNode 后驱节点\n        {number} distance 相隔距离\n     */\n    static createDoubleEdge(obj, preNode, postNode, distance) {\n        if (obj.adjList.hasOwnProperty(preNode)) {\n            obj.adjList[preNode].push(new Edge(preNode, postNode, distance));\n        }\n        else {\n            obj.adjList[preNode] = [];\n            obj.adjList[preNode].push(new Edge(preNode, postNode, distance));\n        }\n\n        if (obj.adjList.hasOwnProperty(postNode)) {\n            obj.adjList[postNode].push(new Edge(postNode, preNode, distance));\n        }\n        else {\n            obj.adjList[postNode] = [];\n            obj.adjList[postNode].push(new Edge(postNode, preNode, distance));\n        }\n    }\n\n}\n\n/* 创建表格行内容 */\nfunction createRow(start, end, distance, fee) {\n    return { start, end, distance, fee }\n}\n\n/* 计算地铁乘车费用 */\nfunction getFee(distance) {\n    if (distance < 6) return 3;\n    else if (distance < 12) return 4;\n    else if (distance < 22) return 5;\n    else if (distance < 32) return 6;\n    else if (distance < 52) return 7;\n    else if (distance < 72) return 8;\n    else return 9;\n}\n\n/*\n    Dijkstra 算法\n    @static function Dijkstra\n    求两点最短路径\n    @param\n    {string} start 始发站\n    {string} end 终点站\n    {Dict} adjList 邻接表\n    @return \n    {Array} res 长度为4的数组，0存最短距离，1存最短路径，2是费用, 3是表格的行信息\n*/\nfunction Dijkstra(start, end, adjList) {\n    if (!adjList.hasOwnProperty(start) || !adjList.hasOwnProperty(end)) return -1;\n    let arrived = [start];  /* 到达过的点 */\n    let rows = []   /* 未来表格需要渲染的内容 */\n\n    /* 路径规划，用于存放每个站点的前驱节点*/\n    let prev = {\n\n    };\n\n    /* 初始化可达信息 Station : distance */\n    let dijList = {\n\n    };\n\n    /* 初始化，可达距离最初为无限，所有的前驱节点都是undefined */\n    for (let station of Object.keys(adjList)) {\n        dijList[station] = Infinity;\n        prev[station] = undefined;\n    }\n\n    prev[start] = start;   /* 自己到自己是最短 */\n    dijList[start] = 0;    /* 自己到自己是0 */\n\n    /* 用start的邻接表初始化信息 */\n    for (let edge of adjList[start]) {\n        let toStation = edge.to;\n        dijList[toStation] = edge.distance;     /* 可达距离 */\n        prev[toStation] = start;                /* 更新前驱节点 */\n    }\n\n    /* 更新完所有站点再退出 */\n    while (1) {\n        let min = Infinity;\n        let selectNode = undefined; /* 这次循环将找到的最短节点 */\n\n        let findTheShortest = false;    /* 如果找不到最小节点，直接break */\n        /* 用in循环，对站点进行遍历 */\n        for (let key in dijList) {\n            /* 选出可达中最小且没有到达过的 */\n            if (arrived.indexOf(key) === -1 && dijList[key] < min) {\n                selectNode = key;\n                min = dijList[key];\n                findTheShortest = true;\n            }\n        }\n        if (!findTheShortest) break;\n\n        /* 更新距离信息 */\n        for (let edge of adjList[selectNode]) {\n            /* 如果距离和小于原本的距离 */\n            if (dijList[selectNode] + edge.distance < dijList[edge.to]) {\n                dijList[edge.to] = dijList[edge.from] + edge.distance;\n                prev[edge.to] = selectNode;\n            }\n        }\n        arrived.push(selectNode);\n        rows.push(createRow(start, selectNode, dijList[selectNode].toFixed(3), getFee(dijList[selectNode])));\n    }\n    // console.log(dijList);\n\n    /* 折腾路径 */\n    let resPath = [end];\n    let currentNode = prev[end];\n    while (currentNode !== start) {\n        resPath.push(currentNode);\n        currentNode = prev[currentNode];\n    }\n    resPath.push(start);\n\n    /* 计算费用 */\n    let shortestDis = dijList[end];\n    let fee = getFee(shortestDis);\n\n    return [dijList[end], resPath.reverse(), fee, rows];\n}\n\n\nclass DataHandler {\n\n    /*\n        @constructor\n        处理数据的类\n        @param\n        {Dict} StationController 存储所有站的信息，每个信息对应的是一个Station对象\n        {Array{string}} allLine 存所有线路的原始信息，注意名字没有去掉\\r\n        {Array{Array}} lineInfo 二位数组，0存线路名称，1存站点数\n        {Dict} adjList 地铁线路邻接表\n    */\n    constructor() {\n        this.StationController = {\n\n        };\n        this.allLine = [];\n        this.lineInfo = [];\n        this.adjList = {};\n    }\n\n    /*\n        @function cutLine\n        用于把地铁各站间的数据分开，提取对应站点、线路\n        @param\n        {Array} txtArr 读入后被分割的txt数组 注意要保留地铁线路数\n        {string} spliter 分割符，不填入默认为中文逗号\n    */\n    cutLine(txtArr, spliter) {\n        var real_spliter = undefined;\n        if (arguments.length < 2) real_spliter = \"，\";\n        else real_spliter = spliter;\n        var linesCounts = txtArr[0];\n        for (var i = 1; i <= linesCounts; i++) {\n            var tempLine = txtArr[i].split(real_spliter);\n            this.allLine.push(tempLine);                         /* 添加线路信息 */\n            var lineStationCnts = parseInt(tempLine[2]);         /* 地铁线路总站数 */\n            var lineName = tempLine[1];                          /* 地铁线路名称 {string} */\n            this.lineInfo.push([lineName, lineStationCnts]);     /* 线路信息，站点名称-站点数量 */\n            /* 对于每一条线，遍历每个站 */\n            for (var j = 3; j < tempLine.length; j += 2) {\n                // 名字必须要去掉 \\r 等回车换行符\n                var stationName = tempLine[j].replace(/[\\r\\n]/g, \"\");\n                var nextStationName = undefined;    /* 下一站的名称 */\n                if (j !== (tempLine.length - 1)) nextStationName = tempLine[j + 2].replace(/[\\r\\n]/g, \"\");    /* 如果不是最后一站，则建立和下一站的边 */\n\n                if (this.StationController.hasOwnProperty(stationName)) {           /* 已经遍历过的站 */\n                    this.StationController[stationName].onLine.add(lineName);\n                }\n                else {  /* 如果这是没有遍历过的点 */\n                    this.StationController[stationName] = new Station(stationName);\n                    this.StationController[stationName].onLine.add(lineName);\n                }\n\n                /* 建立邻接表 */\n                if (nextStationName) {\n                    Edge.createDoubleEdge(this, stationName, nextStationName, parseFloat(tempLine[j + 1]));\n                }\n\n            }\n        }\n    }\n\n};\n\nexport default DataHandler;\nexport { Station };\nexport { Dijkstra };","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { id: 'start', label: '始发站', minWidth: 200, align: 'left' },\n  { id: 'end', label: '终点站', minWidth: 200, align: 'left' },\n  {\n    id: 'distance',\n    label: '最短距离（KM）',\n    minWidth: 200,\n    align: 'left',\n  },\n  {\n    id: 'fee',\n    label: '费用（元）',\n    minWidth: 2000,\n    align: 'left',\n  }\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '70%',\n  },\n  container: {\n    maxHeight: 500,\n  },\n});\n\nexport default function StickyHeadTable(props) {\n  const rows = props.tableRows;\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","/*\n    @18105226 陈宇卿\n    输入起终点 费用表\n */\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport DirectionsSubwayIcon from '@material-ui/icons/DirectionsSubway';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport IconButton from '@material-ui/core/IconButton';\nimport DirectionsIcon from '@material-ui/icons/Directions';\nimport { Dijkstra } from './DataHandler';\nimport { Container } from '@material-ui/core';\nimport StickyHeadTable from './theTable';\n\n\nclass FeeTable extends React.Component {\n\n    /* \n        @constructor\n        {string} start 始发站\n        {string} end 终点站\n        {Dict} adjList 图的邻接表\n        {string} shortestPath 最短路径\n        {string} output 需要输出的提示语\n        {number} fee 地铁所需的费用\n        {bool} checked 是否提出查询请求，没提出之前提示语不一样\n        {Array} tableRows 表格渲染的每一行\n    */\n    constructor(props) {\n        super(props);\n        this.state = {\n            start: undefined,\n            end: undefined,\n            adjList: props.data.adjList,\n            shortestPath: \"\",\n            output: \"\",\n            fee: 0,\n            checked: false,\n            tableRows : []\n        }\n    }\n\n    /* 根据是否点击来渲染不同的内容，点击前是提示，点击后是结果 */\n    contentSelector(obj) {\n        if (obj.state.checked) {\n            return (\n                <div>\n                    <Container spacing={10}>\n                        {obj.state.output}\n                    </Container>\n\n                    <Container>\n                        最短路径为 {obj.state.shortestPath}\n                    </Container>\n\n                    <Container spacing={10}>\n                        本线路地铁费用为 {obj.state.fee} 元\n                    </Container>\n\n                    <StickyHeadTable tableRows={obj.state.tableRows}>\n\n                    </StickyHeadTable>\n                </div>\n            );\n        }\n        else {\n            return (\n                <Container>\n                    请输入起点站和终点站，点击蓝色按钮进行查询。\n                </Container>\n            )\n        }\n    }\n\n\n    /* \n    \n    */\n    clickHandler(obj) {\n        obj.setState({\n            checked: true\n        });\n        let algorithmInfo = Dijkstra(obj.state.start, obj.state.end, obj.state.adjList);\n        if (algorithmInfo === -1) {      /* 输入有误 */\n            obj.setState({\n                output: \"没有查询到对应站点\"\n            });\n        }\n        else {\n            let distance = algorithmInfo[0];\n            /* 把路径变成字符串 */\n            let path = \"\";\n            for (let i = 0; i < algorithmInfo[1].length; i++) {\n                path += algorithmInfo[1][i];\n                if (i < algorithmInfo[1].length - 1) {\n                    path += \" -> \";\n                }\n            }\n            let output = obj.state.start + \"到\" + obj.state.end + \"的距离为\" + distance.toFixed(3) + \"KM\";\n            this.setState({\n                output: output,\n                shortestPath: path,\n                fee: algorithmInfo[2],\n                tableRows: algorithmInfo[3]\n            });\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing={1} alignItems=\"flex-end\">\n                    <Grid item>\n                        <DirectionsSubwayIcon />\n                    </Grid>\n                    <Grid item>\n                        <TextField id=\"start\" label=\"始发站\" onChange={(e) => {\n                            this.setState({\n                                start: e.target.value\n                            });\n                        }} />\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={1} alignItems=\"flex-end\">\n                    <Grid item>\n                        <DirectionsRailwayIcon />\n                    </Grid>\n                    <Grid item>\n                        <TextField id=\"end\" label=\"终点站\" onChange={(e) => {\n                            this.setState({\n                                end: e.target.value\n                            });\n                        }} />\n                    </Grid>\n                </Grid>\n\n                <IconButton aria-label=\"go\" color=\"primary\" onClick={() => this.clickHandler(this)}>\n                    <DirectionsIcon />\n                </IconButton>\n\n                {this.contentSelector(this)}\n            </div>\n        );\n    }\n}\n\nexport default FeeTable;","/*\n    @18105226 陈宇卿\n    中间页的主要渲染内容，作为中间组件，信息传递\n    等级和 NavBar 并行\n*/\n\nimport React from 'react';\nimport InfoImport from './InfoImport';\nimport Map from './Map';\nimport FeeTable from './FeeTable';\n\n\nclass Content extends React.Component {\n\n    render() {\n        if (this.props.showIndex === 0) {\n            return (\n                <InfoImport \n                    data = {this.props.data}\n                    setDataLoaded = {this.props.setDataLoaded}\n                />\n            );\n        }\n        else if (this.props.showIndex === 1) {\n            return (\n                <FeeTable \n                    data = {this.props.data}\n                />\n            );\n        }\n        else {\n            return (\n                <Map \n                    data = {this.props.data}\n                />\n            );\n        }\n    }\n}\n\nexport default Content;","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport NavBar from './NavBar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Content from './Content';\nimport DataHandler from './DataHandler';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://github.com/scyq\">\n        18105226 陈宇卿 数据结构课设\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  /* 实现抽屉效果的方法 */\n  const [open, setOpen] = React.useState(true);\n\n  /* 记录、保存数据的类，保证不会被回收 */\n  const [data] = React.useState(new DataHandler());\n\n  /* 数据是否加载完成 */\n  const [dataLoaded, setDataLoaded] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  // 当前现实的页面\n  const [showIndex, setShowIndex] = React.useState(0);\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            北京地铁费用查询系统\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      \n      {/* Drawer 用于实现抽屉折叠效果 */}\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n          <List> \n            <NavBar \n              setShowIndex = {setShowIndex}\n              dataLoaded = {dataLoaded}\n            />\n          </List>\n        <Divider />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n\n          {/* 主要内容显示在Conten中，利用传入的showIndex来表示渲染哪个选项卡 */}\n          <Content \n            showIndex = {showIndex}\n            data = {data}\n            setDataLoaded = {setDataLoaded}\n          />\n\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}